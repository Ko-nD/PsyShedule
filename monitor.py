import os
import time
import random
import requests
import datetime
import json
from typing import Dict, Set, Optional
from dotenv import load_dotenv

# ---------------------------------------------
# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ---------------------------------------------

DATA_FOLDER = "data"
STATE_FILE = os.path.join(DATA_FOLDER, "state.json")

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env (–µ—Å–ª–∏ –µ—Å—Ç—å)

BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID", "")
DOCTOR_ID = os.environ.get("DOCTOR_ID", "")

CHECK_INTERVAL = 30  # –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫)

# ---------------------------------------------
# ¬´–ê–Ω—Ç–∏—Ñ—Ä–æ–¥¬ª: —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ + –∑–∞–¥–µ—Ä–∂–∫–∞
# ---------------------------------------------

USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
    "(KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36",

    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) "
    "Gecko/20100101 Firefox/109.0",

    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_1) AppleWebKit/605.1.15 "
    "(KHTML, like Gecko) Version/16.1 Safari/605.1.15"
]

def get_headers() -> dict:
    """–§–æ—Ä–º–∏—Ä—É–µ–º ¬´—Å–ª—É—á–∞–π–Ω—ã–µ¬ª –∑–∞–≥–æ–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã –Ω–µ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç."""
    return {
        "User-Agent": random.choice(USER_AGENTS),
        "Accept": "text/html,application/xhtml+xml,application/xml;"
                  "q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8",
        "Accept-Encoding": "gzip, deflate, br",
        "Connection": "keep-alive",
        "Upgrade-Insecure-Requests": "1"
    }

def random_sleep(base_interval: int):
    """
    –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª + –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É (1..15 —Å–µ–∫—É–Ω–¥),
    —á—Ç–æ–±—ã –Ω–µ —Å—Ç—É—á–∞—Ç—å—Å—è —Å–ª–∏—à–∫–æ–º —Ä–æ–≤–Ω–æ –∏ –Ω–µ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ ¬´–±–æ—Ç¬ª.
    """
    extra = random.uniform(1, 15)
    time.sleep(base_interval + extra)

# ---------------------------------------------
# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
# ---------------------------------------------

WEEKDAYS_RU = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
MONTHS_RU = [
    "",  # –∏–Ω–¥–µ–∫—Å 0 –ø—É—Å—Ç–æ–π, —á—Ç–æ–±—ã month (1..12) —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è",
    "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
]

def format_date_russian(date_obj: datetime.date) -> str:
    """'2025-01-26' => '26 —è–Ω–≤–∞—Ä—è (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)'"""
    day = date_obj.day
    month = date_obj.month
    weekday = date_obj.weekday()  # –ü–Ω=0 ... –í—Å=6
    return f"{day} {MONTHS_RU[month]} ({WEEKDAYS_RU[weekday]})"

def format_datetime_russian(dt: datetime.datetime) -> str:
    """–î–∞—Ç–∞-–≤—Ä–µ–º—è –≤ —Å—Ç–∏–ª–µ '26 —è–Ω–≤–∞—Ä—è 2025, 19:30'."""
    day = dt.day
    month = dt.month
    year = dt.year
    hour = dt.hour
    minute = dt.minute
    month_ru = MONTHS_RU[month]
    return f"{day} {month_ru} {year} {hour:02d}:{minute:02d}"

# ---------------------------------------------
# –ó–∞–ø—Ä–æ—Å —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
# ---------------------------------------------

API_URL = (
    "https://telemed-patient-bff.sberhealth.ru/api/showcase/web/v1/"
    f"providers/62/doctors/{DOCTOR_ID}/specialties/psychologist/slots"
)

DOCTOR_URL = f"https://lk.sberhealth.ru/catalog/onlayn-konsultatsii/psikholog-katalog/doctor/{DOCTOR_ID}"

def fetch_slots() -> Dict[str, Set[str]]:
    """
    –î–µ–ª–∞–µ—Ç GET –∫ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ñ–æ—Ä–º–∞—Ç–∞:
    {
      'YYYY-MM-DD': {'HH:MM', ...},
      ...
    }
    –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è ‚Äî –≤–µ—Ä–Ω—ë—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    try:
        headers = get_headers()
        resp = requests.get(API_URL, headers=headers, timeout=15)
        resp.raise_for_status()
        data = resp.json()
        raw_slots = data.get("slots", [])

        result = {}
        for slot_info in raw_slots:
            slot_time_str = slot_info.get("from")
            if not slot_time_str:
                continue

            dt = datetime.datetime.fromisoformat(slot_time_str)  # —É—á—Ç—ë–º +03:00
            date_str = dt.date().isoformat()  # "2025-01-26"
            time_str = dt.strftime("%H:%M")   # "19:30"

            if date_str not in result:
                result[date_str] = set()
            result[date_str].add(time_str)

        return result

    except Exception as e:
        print(f"[!] fetch_slots: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return {}

# ---------------------------------------------
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
# ---------------------------------------------

def build_schedule_message(
    slots: Dict[str, Set[str]],
    show_new_alert: bool
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (Markdown) —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ—Ç–æ–≤.
    """
    lines = []
    if show_new_alert:
        lines.append("üü¢ [–ü–æ—è–≤–∏–ª–∏—Å—å]({DOCTOR_URL}) –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã üü¢\n")

    lines.append("üóì *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏:*")

    all_dates = sorted(slots.keys())
    if not all_dates:
        lines.append("_(–ø–æ–∫–∞ –ø—É—Å—Ç–æ)_")
    else:
        for date_str in all_dates:
            date_obj = datetime.date.fromisoformat(date_str)
            date_human = format_date_russian(date_obj)
            times = sorted(slots[date_str])
            times_str = ", ".join(times)
            lines.append(f"{date_human}: {times_str}")

    return "\n".join(lines)

# ---------------------------------------------
# –¢–µ–ª–µ–≥—Ä–∞–º –º–µ—Ç–æ–¥—ã
# ---------------------------------------------

def tg_send_message(bot_token: str, chat_id: str, text: str) -> Optional[int]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id."""
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        resp = requests.post(url, json=payload, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        return data["result"]["message_id"]
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ tg_send_message: {e}")
        return None

def tg_delete_message(bot_token: str, chat_id: str, message_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID."""
    url = f"https://api.telegram.org/bot{bot_token}/deleteMessage"
    payload = {
        "chat_id": chat_id,
        "message_id": message_id
    }
    try:
        resp = requests.post(url, json=payload, timeout=10)
        resp.raise_for_status()
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ tg_delete_message: {e}")

def tg_edit_message(bot_token: str, chat_id: str, message_id: int, new_text: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç)."""
    url = f"https://api.telegram.org/bot{bot_token}/editMessageText"
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": new_text,
        "parse_mode": "Markdown"
    }
    try:
        resp = requests.post(url, json=payload, timeout=10)
        resp.raise_for_status()
    except requests.exceptions.HTTPError:
        print("[!] tg_edit_message HTTPError:", resp.status_code, resp.text)
        raise
    except Exception as e:
        print("[!] tg_edit_message Exception:", e)
        raise

# ---------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ—Ç–∞–º–∏
# ---------------------------------------------

def find_added_slots(old: Dict[str, Set[str]], new: Dict[str, Set[str]]) -> Dict[str, Set[str]]:
    added = {}
    for d, new_times in new.items():
        old_times = old.get(d, set())
        diff = new_times - old_times
        if diff:
            added[d] = diff
    return added

def find_removed_slots(old: Dict[str, Set[str]], new: Dict[str, Set[str]]) -> Dict[str, Set[str]]:
    removed = {}
    for d, old_times in old.items():
        new_times = new.get(d, set())
        diff = old_times - new_times
        if diff:
            removed[d] = diff
    return removed

# ---------------------------------------------
# –ë–∞–Ω–Ω–µ—Ä
# ---------------------------------------------

def still_show_banner(slots: Dict[str, Set[str]], time_new: Optional[datetime.datetime]) -> bool:
    """
    –ë–∞–Ω–Ω–µ—Ä ¬´–ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ –¥–æ–ª—å—à–µ —á–∞—Å–∞ –∏ –ø–æ–∫–∞ —Å–ª–æ—Ç—ã –Ω–µ –∫–æ–Ω—á–∏–ª–∏—Å—å.
    """
    if not time_new:
        return False
    now = datetime.datetime.now()
    diff = (now - time_new).total_seconds()
    if diff > 3600:
        return False
    total_slots = sum(len(s) for s in slots.values())
    if total_slots == 0:
        return False
    return True

# ---------------------------------------------
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ñ–∞–π–ª state.json)
# ---------------------------------------------

def load_state() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å. –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π dict."""
    if not os.path.exists(STATE_FILE):
        return {}
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data
    except Exception as e:
        print("[!] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ state.json:", e)
        return {}

def save_state(state: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª state.json (JSON)."""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ data/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:
    os.makedirs(DATA_FOLDER, exist_ok=True)
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print("[!] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è state.json:", e)


def state_to_dict(
    message_id_schedule: Optional[int],
    old_schedule_text: Optional[str],
    message_id_no_slots: Optional[int],
    old_no_slots_text: Optional[str],
    time_of_new_slots: Optional[datetime.datetime],
    last_time_slots_found: Optional[datetime.datetime],
    current_slots: Dict[str, Set[str]]
) -> dict:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Å–ª–æ–≤–∞—Ä—å.
    –î–æ–±–∞–≤–∏–ª–∏ old_no_slots_text –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ¬´–Ω–µ—Ç —Å–ª–æ—Ç–æ–≤¬ª.
    """
    # current_slots: set -> list
    slots_serializable = {}
    for date_str, times_set in current_slots.items():
        slots_serializable[date_str] = sorted(list(times_set))

    # –î–∞—Ç—ã -> isoformat
    time_new_str = time_of_new_slots.isoformat() if time_of_new_slots else None
    last_slots_str = last_time_slots_found.isoformat() if last_time_slots_found else None

    return {
        "message_id_schedule": message_id_schedule,
        "old_schedule_text": old_schedule_text,
        "message_id_no_slots": message_id_no_slots,
        "old_no_slots_text": old_no_slots_text,
        "time_of_new_slots": time_new_str,
        "last_time_slots_found": last_slots_str,
        "current_slots": slots_serializable
    }


def dict_to_state(data: dict):
    """
    –û–±—Ä–∞—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
    """
    message_id_schedule = data.get("message_id_schedule")
    old_schedule_text = data.get("old_schedule_text")
    message_id_no_slots = data.get("message_id_no_slots")
    old_no_slots_text = data.get("old_no_slots_text")

    # time_of_new_slots
    time_of_new_slots_str = data.get("time_of_new_slots")
    if time_of_new_slots_str:
        time_of_new_slots = datetime.datetime.fromisoformat(time_of_new_slots_str)
    else:
        time_of_new_slots = None

    # last_time_slots_found
    last_slots_str = data.get("last_time_slots_found")
    if last_slots_str:
        last_time_slots_found = datetime.datetime.fromisoformat(last_slots_str)
    else:
        last_time_slots_found = None

    # current_slots
    current_slots_data = data.get("current_slots", {})
    current_slots: Dict[str, Set[str]] = {}
    for date_str, times_list in current_slots_data.items():
        current_slots[date_str] = set(times_list)

    return (
        message_id_schedule,
        old_schedule_text,
        message_id_no_slots,
        old_no_slots_text,
        time_of_new_slots,
        last_time_slots_found,
        current_slots
    )


# ---------------------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# ---------------------------------------------
def run_monitor():
    """
    - –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å).
    - –í –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ fetch_slots(), –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º/–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è.
    - –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """

    # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    data = load_state()
    if data:
        (
            message_id_schedule,
            old_schedule_text,
            message_id_no_slots,
            old_no_slots_text,
            time_of_new_slots,
            last_time_slots_found,
            current_slots
        ) = dict_to_state(data)
    else:
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        message_id_schedule = None
        old_schedule_text = None
        message_id_no_slots = None
        old_no_slots_text = None
        time_of_new_slots = None
        last_time_slots_found = None
        current_slots = {}

    while True:
        new_slots = fetch_slots()

        # --- (1) –ù–µ—Ç —Å–ª–æ—Ç–æ–≤
        if not new_slots:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –±—ã–ª–æ
            if message_id_schedule is not None:
                tg_delete_message(BOT_TOKEN, CHAT_ID, message_id_schedule)
                message_id_schedule = None
                old_schedule_text = None

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ¬´–Ω–µ—Ç —Å–ª–æ—Ç–æ–≤¬ª
            if last_time_slots_found:
                last_str = format_datetime_russian(last_time_slots_found)
                new_no_slots_text = (
                    f"üî¥ –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ [–Ω–µ—Ç]({DOCTOR_URL}) üî¥\n\n"
                    "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ ‚Äî —Å—Ä–∞–∑—É –Ω–∞–ø–∏—à—É üôèüèª\n"
                    f"_(–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ: {last_str})_"
                )
            else:
                new_no_slots_text = (
                    f"üî¥ –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ [–Ω–µ—Ç]({DOCTOR_URL}) üî¥\n\n"
                    "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ ‚Äî —Å—Ä–∞–∑—É –Ω–∞–ø–∏—à—É üôèüèª"
                )

            # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–Ω–µ—Ç —Å–ª–æ—Ç–æ–≤¬ª
            if message_id_no_slots:
                # –°—Ä–∞–≤–Ω–∏–º —Ç–µ–∫—Å—Ç
                if old_no_slots_text != new_no_slots_text:
                    # –¢–µ–∫—Å—Ç –ø–æ–º–µ–Ω—è–ª—Å—è => —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                    tg_edit_message(BOT_TOKEN, CHAT_ID, message_id_no_slots, new_no_slots_text)
                    old_no_slots_text = new_no_slots_text
                else:
                    # –¢–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ–Ω—è–ª—Å—è => –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                    pass
            else:
                # –°–æ–æ–±—â–µ–Ω–∏—è ¬´–Ω–µ—Ç —Å–ª–æ—Ç–æ–≤¬ª –µ—â—ë –Ω–µ—Ç => —Å–æ–∑–¥–∞—ë–º
                msg_id = tg_send_message(BOT_TOKEN, CHAT_ID, new_no_slots_text)
                message_id_no_slots = msg_id
                old_no_slots_text = new_no_slots_text

            # current_slots = {} (–ø—É—Å—Ç–æ)
            current_slots = {}

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            state_dict = state_to_dict(
                message_id_schedule,
                old_schedule_text,
                message_id_no_slots,
                old_no_slots_text,
                time_of_new_slots,
                last_time_slots_found,
                current_slots
            )
            save_state(state_dict)

            random_sleep(CHECK_INTERVAL)
            continue

        # --- (2) –ï—Å—Ç—å —Å–ª–æ—Ç—ã
        # –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ –±—ã–ª–æ –ø—É—Å—Ç–æ, –∑–Ω–∞—á–∏—Ç –ø–æ—è–≤–∏–ª–∏—Å—å
        if not current_slots:
            last_time_slots_found = datetime.datetime.now()

        # –£–¥–∞–ª—è–µ–º ¬´–Ω–µ—Ç —Å–ª–æ—Ç–æ–≤¬ª, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if message_id_no_slots:
            tg_delete_message(BOT_TOKEN, CHAT_ID, message_id_no_slots)
            message_id_no_slots = None
            old_no_slots_text = None

        # –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å / –ø—Ä–æ–ø–∞–ª–æ
        added = find_added_slots(current_slots, new_slots)
        removed = find_removed_slots(current_slots, new_slots)

        if added:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
            if message_id_schedule:
                tg_delete_message(BOT_TOKEN, CHAT_ID, message_id_schedule)
                message_id_schedule = None
                old_schedule_text = None

            time_of_new_slots = datetime.datetime.now()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–Ω–Ω–µ—Ä–æ–º
            show_banner = True
            new_text = build_schedule_message(new_slots, show_new_alert=show_banner)

            msg_id = tg_send_message(BOT_TOKEN, CHAT_ID, new_text)
            message_id_schedule = msg_id
            old_schedule_text = new_text

            last_time_slots_found = datetime.datetime.now()

        else:
            # –ù–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç, –Ω–æ —á—Ç–æ-—Ç–æ –º–æ–≥–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è (–ø—Ä–æ–ø–∞—Å—Ç—å),
            # –∏–ª–∏ –±–∞–Ω–Ω–µ—Ä –º–æ–≥ ¬´–∏—Å—Ç–µ—á—å¬ª
            show_banner = still_show_banner(new_slots, time_of_new_slots)
            new_text = build_schedule_message(new_slots, show_new_alert=show_banner)

            if message_id_schedule:
                if old_schedule_text != new_text:
                    tg_edit_message(BOT_TOKEN, CHAT_ID, message_id_schedule, new_text)
                    old_schedule_text = new_text
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º ‚Äî —Å–æ–∑–¥–∞—ë–º
                msg_id = tg_send_message(BOT_TOKEN, CHAT_ID, new_text)
                message_id_schedule = msg_id
                old_schedule_text = new_text

        current_slots = new_slots

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        state_dict = state_to_dict(
            message_id_schedule,
            old_schedule_text,
            message_id_no_slots,
            old_no_slots_text,
            time_of_new_slots,
            last_time_slots_found,
            current_slots
        )
        save_state(state_dict)

        random_sleep(CHECK_INTERVAL)


# ---------------------------------------------
# –ó–∞–ø—É—Å–∫
# ---------------------------------------------
if __name__ == "__main__":
    os.makedirs(DATA_FOLDER, exist_ok=True)
    run_monitor()
